structure Mirror =
struct
    val smackage = "/home/gdpe/smackage/bin/smackage"
    val smackageHome = "/home/gdpe/.smackage"
    val dataRoot = "/home/gdpe/public_html/smackage/data"
    val docRoot = "/home/gdpe/public_html/smackage/doc"

    fun versionMap f res =
        (List.map 
            (fn (n,dict) => 
                (List.map (fn (k,_) => f (n,k) 
            ) (List.rev (SemVerDict.toList dict)))) res) 

    fun makeDocs (pkg,ver) =
    let
        val srcDir = smackageHome ^ "/lib/" ^ pkg ^ "/v" ^ SemVer.toString ver
        val dir = docRoot ^ "/" ^ pkg ^ "-v" ^ SemVer.toString ver
        val _ = OS.FileSys.isDir dir handle _ => (OS.FileSys.mkDir dir; false)
        val _ = OS.FileSys.chDir dir
      
        val _ = OS.Process.system
            ("smldoc `find " ^ srcDir ^ " \\( ! -regex '.*/.cm/.*' \\) -type f -name \"*.sml\" | xargs`")
    in
        ()
    end

    fun retrSpec (pkg,ver) =
    let
        val _ = OS.Process.system 
            (smackage ^ " get " ^ pkg ^ " " ^ SemVer.toString ver)
        
        val s = SmackLib.info smackageHome (pkg,ver) handle _ =>
            [Spec.Provides (pkg,ver),
             Spec.Key ("comment", "Automated stub spec generated by mirror.sml")]

        val s' = 
        let
            val _ = Spec.provides s
        in
            s
        end handle _ => Spec.Provides (pkg,ver) :: s

        val fo = TextIO.openOut (dataRoot ^ "/" ^ pkg ^ ".smackspec-v" ^
                    SemVer.toString ver)

        val _ = TextIO.output (fo, Spec.toString s')

        val _ = TextIO.closeOut fo

        val _ = print ("Wrote: " ^ dataRoot ^ "/" ^ pkg ^ ".smackspec-v" ^
                    SemVer.toString ver ^ "\n")

        val _ = print ("Generating docs:\n")

        val _ = makeDocs (pkg,ver)
    in
        s'
    end

    fun main () =
    let
        val _ = OS.Process.system (smackage ^ " refresh")

        val _ = VersionIndex.init smackageHome 

        val res = VersionIndex.search ""

        val _ = versionMap retrSpec res
    in
        OS.Process.success
    end
end

val _ = Mirror.main ()

